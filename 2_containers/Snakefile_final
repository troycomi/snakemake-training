# snakefiles are "marked up" python code

# 1) import any extra scripts or libraries

# 2) find all input files:

# -from configuration file or other list
# ids = config['samples']
# ids = ['id1', 'id2', 'id3']

# -from the filesystem using glob wildcards

# 3) build final output

# 4) create rule "all" for default (final) outputs
rule all:
    input:
        'BAMs/SAMPLE_ID_csorted.bam',
        'BAMs/SAMPLE_ID_nsorted.bam',

# 5) build rules following pipeline with input functions above as needed
# we will replace these with a config later
base_url = 'http://www.starklab.org/data/arnold_science_2013'
ref_url = ('ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/215/'
        'GCF_000001215.4_Release_6_plus_ISO1_MT/'
        'GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.gz')

# download data and keep only the first 1000 reads
rule download_data:
    output:
        'FASTQ/SAMPLE_ID_1.fastq.gz',
        'FASTQ/SAMPLE_ID_2.fastq.gz',

    shell:
        'set +euo pipefail \n'
        'wget -q -O - {base_url}/STARRseq_input_lib5.2_1.fastq.gz | '
        'zcat | head -n 4000 | gzip > {output[0]} \n'
        'wget -q -O - {base_url}/STARRseq_input_lib5.2_2.fastq.gz | '
        'zcat | head -n 4000 | gzip > {output[1]} \n'
        'echo'

rule download_reference:
    output:
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna'

    shell:
        'wget -q -O - {ref_url} | gunzip -c > {output}'

rule index_reference:
    input:
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna'

    output:
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.fai'

    singularity: 'docker://biocontainers/samtools:v1.3_cv3'

    shell:
        'samtools faidx {input}'

rule bwa_index:
    input:
        reference='GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna',
        index='GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.fai',

    output:
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.bwt',
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.pac',
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.ann',
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.amb',
        'GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.sa',

    singularity: 'docker://biocontainers/bwa:v0.7.17-3-deb_cv1'

    shell:
        'bwa index -a bwtsw {input.reference}'

rule trim:  # name will be used for job-name later
    input:  # lists are specified like so, access with input[0]
        'FASTQ/SAMPLE_ID_1.fastq.gz',
        'FASTQ/SAMPLE_ID_2.fastq.gz',

    output:  # or with names, acces like output[trim_1]
        trim_1='trimmed/SAMPLE_ID_1.TRIMMED.fastq.gz',
        trim_2='trimmed/SAMPLE_ID_2.TRIMMED.fastq.gz',
        unpaired_1='trimmed/SAMPLE_ID_1.unpaired.fastq.gz',
        unpaired_2='trimmed/SAMPLE_ID_2.unpaired.fastq.gz',
        trimlog='trimmed/SAMPLE_ID_trimlog'

    singularity: 'docker://quay.io/biocontainers/trimmomatic:0.39--0'

    shell:
        'java -Xmx8000m '
            '-jar /usr/local/share/trimmomatic-0.39-0/trimmomatic.jar '
            'PE '
            '-threads 4 '
            '-trimlog {output[trimlog]} '
            '-phred33 '
            '{input} '
            '{output[trim_1]} '
            '{output[unpaired_1]} '
            '{output[trim_2]} '
            '{output[unpaired_2]} '
            'ILLUMINACLIP:/usr/local/share/trimmomatic-0.39-0/adapters/NexteraPE-PE.fa:1:30:7 '
            'SLIDINGWINDOW:4:15 '
            'MINLEN:20'

rule bwa:
    input:
        reference='GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna',
        index='GENOME_PATH/GCF_000001215.4_Release_6_plus_ISO1_MT_genomic.fna.bwt',
        fastq1='trimmed/SAMPLE_ID_1.TRIMMED.fastq.gz',
        fastq2='trimmed/SAMPLE_ID_2.TRIMMED.fastq.gz',

    output:
        'BAMs/SAMPLE_ID.bam'

    singularity: 'docker://biocontainers/bwa:v0.7.17-3-deb_cv1'

    shell:
        'bwa mem '
            '-M -t 4 '
            '{input.reference} '
            '{input.fastq1} '
            '{input.fastq2} '
            '> {output}'

rule sort_bam:
    input:
        'BAMs/SAMPLE_ID.bam'

    output:
        csort='BAMs/SAMPLE_ID_csorted.bam',
        nsort='BAMs/SAMPLE_ID_nsorted.bam',

    singularity: 'docker://biocontainers/samtools:v1.3_cv3'

    shell:
        'samtools sort {input} > {output.csort} \n'  # NOTE \n, makes two commands
        'samtools sort -n {input} > {output.nsort}'
